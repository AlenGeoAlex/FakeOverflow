name: Build and Push Backend Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]  # Trigger on version tags
    paths:
      - '.github/workflows/build-push-backend-image.yml'
      - 'apps/fakeoverflow-api/**'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-backend

jobs:
  build:
    name: Build (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-latest
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-24.04-arm  # Native ARM64 runner

    outputs:
      image-digest-amd64: ${{ steps.build-amd64.outputs.digest }}
      image-digest-arm64: ${{ steps.build-arm64.outputs.digest }}
      registry: ${{ env.REGISTRY }}
      image-name: ${{ env.IMAGE_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch,enable=${{ github.ref != 'refs/heads/main' }}
          flavor: |
            latest=false
            suffix=-${{ matrix.arch }}

      - name: Verify Dockerfile exists
        run: |
          DOCKERFILE_PATH="apps/fakeoverflow-api/FakeOverFlow/FakeoverFlow.Backend.Http.Api/Dockerfile"
          if [ ! -f "$DOCKERFILE_PATH" ]; then
            echo "Error: Dockerfile not found at $DOCKERFILE_PATH"
            exit 1
          fi

      - name: Build and push arch-specific image
        id: build-${{ matrix.arch }}
        uses: docker/build-push-action@v6
        with:
          context: apps/fakeoverflow-api/FakeOverFlow
          file: apps/fakeoverflow-api/FakeOverFlow/FakeoverFlow.Backend.Http.Api/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          build-args: |
            BUILD_CONFIGURATION=Release
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true

  manifest:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: build
    if: always() && needs.build.result == 'success'

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (without arch suffix)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch,enable=${{ github.ref != 'refs/heads/main' }}
          flavor: |
            latest=false

      - name: Create and push multi-arch manifest
        run: |
          set -euo pipefail
          
          # Get the tags without arch suffix
          IFS=$'\n' read -rd '' -a tags_array <<< "${{ steps.meta.outputs.tags }}" || true
          
          for tag in "${tags_array[@]}"; do
            if [ -n "$tag" ]; then
              echo "Creating multi-arch manifest for: $tag"
          
              # Create manifest from arch-specific images
              docker buildx imagetools create \
                --tag "$tag" \
                "${tag}-amd64" \
                "${tag}-arm64"
          
              echo "âœ“ Successfully created manifest for $tag"
            fi
          done

      - name: Clean up arch-specific tags (optional)
        run: |
          echo "Note: Arch-specific images (e.g., *-amd64, *-arm64) will remain in registry"
          echo "These can be cleaned up manually if desired, but they're useful for debugging"

      - name: Verify multi-arch manifest
        run: |
          echo "Verifying multi-arch manifests:"
          IFS=$'\n' read -rd '' -a tags_array <<< "${{ steps.meta.outputs.tags }}" || true
          
          for tag in "${tags_array[@]}"; do
            if [ -n "$tag" ]; then
              echo "Checking $tag:"
              docker buildx imagetools inspect "$tag" --format '{{json .Manifest}}' | jq -r '.manifests[]? | "  - \(.platform.architecture)/\(.platform.os)"' || echo "  (manifest format may vary)"
            fi
          done