name: Generate OpenAPI spec and open PR

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/fakeoverflow-api/**'
      - '.github/workflows/generate-openapi-spec.yml'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-openapi:
    name: Generate OpenAPI and create PR
    runs-on: ubuntu-latest
    env:
      SOLUTION_PATH: apps/fakeoverflow-api/FakeOverFlow/FakeOverFlow.sln
      API_PROJECT_PATH: apps/fakeoverflow-api/FakeOverFlow/FakeoverFlow.Backend.Http.Api/FakeoverFlow.Backend.Http.Api.csproj
      OPENAPI_OUTPUT_PATH: apps/fakeoverflow-api/FakeOverFlow/FakeoverFlow.Backend.Http.Api/bin/Release/net9.0/OpenAPI
      OUTPUT_DIR: .specification
      OUTPUT_FILE: fakeoverflow-api.json
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build solution (Release) - OpenAPI generated automatically
        run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

      - name: Copy generated OpenAPI specification
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ env.OUTPUT_DIR }}"
          
          echo "üîç Looking for generated OpenAPI documents..."
          ls -la "${{ env.OPENAPI_OUTPUT_PATH }}" || echo "OpenAPI directory not found"
          
          # The build should have generated the OpenAPI document
          # Look for common OpenAPI file names
          OPENAPI_SOURCE=""
          for filename in "v1.json" "openapi.json" "*.json"; do
            if [ -f "${{ env.OPENAPI_OUTPUT_PATH }}/$filename" ]; then
              OPENAPI_SOURCE="${{ env.OPENAPI_OUTPUT_PATH }}/$filename"
              echo "üìÑ Found OpenAPI spec: $OPENAPI_SOURCE"
              break
            fi
          done
          
          if [ -z "$OPENAPI_SOURCE" ]; then
            echo "‚ùå No OpenAPI specification found in build output"
            echo "Available files in OpenAPI directory:"
            ls -la "${{ env.OPENAPI_OUTPUT_PATH }}/" || echo "Directory doesn't exist"
            exit 1
          fi
          
          # Copy and pretty-print the OpenAPI spec
          if command -v jq >/dev/null 2>&1; then
            jq . "$OPENAPI_SOURCE" > "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}"
          else
            cp "$OPENAPI_SOURCE" "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}"
          fi
          
          echo "‚úÖ Copied OpenAPI spec to ${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}"
          
          # Show basic info about generated spec
          if command -v jq >/dev/null 2>&1; then
            echo "üìä API Info:"
            jq -r '.info | "Title: \(.title // "N/A"), Version: \(.version // "N/A")"' "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}" || true
            echo "üîó Endpoints: $(jq -r '.paths | keys | length' "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}" 2>/dev/null || echo "unknown")"
          fi

      - name: Validate generated specification
        shell: bash
        run: |
          set -euo pipefail
          
          # Basic validation - check if file exists and is valid JSON
          if [ ! -f "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}" ]; then
            echo "‚ùå OpenAPI spec file was not generated"
            exit 1
          fi
          
          # Validate JSON syntax
          if command -v jq >/dev/null 2>&1; then
            if ! jq empty "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}"; then
              echo "‚ùå Generated OpenAPI spec is not valid JSON"
              exit 1
            fi
          
            # Check for required OpenAPI fields
            if ! jq -e '.openapi' "${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}" >/dev/null; then
              echo "‚ùå Generated spec missing 'openapi' field"
              exit 1
            fi
          
            echo "‚úÖ OpenAPI specification validation passed"
          else
            echo "‚ö†Ô∏è jq not available, skipping detailed validation"
          fi

      - name: Create Pull Request with updated spec
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(openapi): update generated OpenAPI spec"
          title: "chore(openapi): update generated OpenAPI spec"
          body: |
            ## üîÑ OpenAPI Specification Update
            
            This PR contains an automatically generated update to the OpenAPI specification.
            
            ### üìã Details
            - **Generated from**: Latest main commit `${{ github.sha }}`
            - **Source**: FastEndpoints .NET 9 API at `apps/fakeoverflow-api`
            - **Method**: ASP.NET Core 9.0 build-time generation (`Microsoft.Extensions.ApiDescription.Server`)
            - **Generated at**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            ### üõ†Ô∏è Changes
            - Updated `${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}`
            
            ### üîç Review Checklist
            - [ ] Verify new endpoints are documented correctly
            - [ ] Check for any breaking changes in existing endpoints
            - [ ] Ensure response schemas are accurate
            - [ ] Validate authentication/authorization requirements
            
            ---
            *This PR was automatically generated using ASP.NET Core 9.0's built-in OpenAPI generation.*
          branch: chore/update-openapi-spec
          add-paths: |
            ${{ env.OUTPUT_DIR }}/${{ env.OUTPUT_FILE }}
          signoff: false
          delete-branch: true
          labels: |
            automated
            openapi
            documentation