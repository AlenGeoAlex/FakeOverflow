name: Generate Migration SQL Scripts

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'apps/fakeoverflow-api/FakeOverFlow/FakeoverFlow.Backend.Http.Api/Migrations/**'
      - '.github/workflows/generate-migration-scripts.yml'

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-sql-scripts:
    runs-on: ubuntu-latest

    env:
      SOLUTION_PATH: apps/fakeoverflow-api/FakeOverFlow/FakeOverFlow.sln
      API_PROJECT_PATH: apps/fakeoverflow-api/FakeOverFlow/FakeoverFlow.Backend.Http.Api/FakeoverFlow.Backend.Http.Api.csproj
      MIGRATIONS_DIR: apps/fakeoverflow-api/FakeOverFlow/FakeoverFlow.Backend.Http.Api/Migrations
      OUTPUT_DIR: packages/fakeover-migrations

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build project
        run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

      - name: Install EF Core tools
        run: dotnet tool install --global dotnet-ef --version 9.0.0

      - name: Generate SQL Scripts
        shell: bash
        run: |
          set -euo pipefail

          # Compute range of commits for this push
          BEFORE_SHA=${{ github.event.before || '' }}
          AFTER_SHA=${{ github.sha }}

          # Get the current date (folder name)
          CURRENT_DATE=$(date +"%Y%m%d")
          DATE_OUTPUT_DIR="${OUTPUT_DIR}/${CURRENT_DATE}"

          # Ensure output directory exists (with date folder)
          mkdir -p "${DATE_OUTPUT_DIR}"

          echo "CURRENT_DATE=${CURRENT_DATE}" >> $GITHUB_ENV
          echo "DATE_OUTPUT_DIR=${DATE_OUTPUT_DIR}" >> $GITHUB_ENV

          # Collect changed migration files in this push (added or modified), excluding Designer/Snapshot
          if [ -n "${BEFORE_SHA}" ]; then
            CHANGED_FILES=$(git diff --name-only "$BEFORE_SHA" "$AFTER_SHA" | grep -E "^${MIGRATIONS_DIR}/.*_.*\.cs$" | grep -vE "Designer\.cs$|Snapshot\.cs$" || true)
          else
            # Fallback: use last commit only
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "^${MIGRATIONS_DIR}/.*_.*\.cs$" | grep -vE "Designer\.cs$|Snapshot\.cs$" || true)
          fi

          if [ -z "${CHANGED_FILES}" ]; then
            echo "No changed migration files detected; falling back to latest migration present in directory."
            CHANGED_FILES=$(find "${MIGRATIONS_DIR}" -maxdepth 1 -type f -name "*_*.cs" ! -name "*Designer.cs" ! -name "*Snapshot.cs" | sort | tail -n1)
          fi

          # Build an ordered list of all migrations (by filename sort) to determine predecessors
          mapfile -t ALL_MIGS < <(find "${MIGRATIONS_DIR}" -maxdepth 1 -type f -name "*_*.cs" ! -name "*Designer.cs" ! -name "*Snapshot.cs" | sort)

          if [ ${#ALL_MIGS[@]} -eq 0 ]; then
            echo "No migration files found in ${MIGRATIONS_DIR}"
            exit 1
          fi

          # Normalize and sort the changed list according to overall order
          mapfile -t CHANGED_SORTED < <(printf "%s\n" ${CHANGED_FILES} | sort)

          GENERATED_FILES_LIST=""
          TITLE_FIRST=""
          TITLE_LAST=""
          COUNT=0

          # Helper to find previous migration filename given current
          find_prev() {
            local current="$1"
            local prev=""
            for i in "${!ALL_MIGS[@]}"; do
              if [ "${ALL_MIGS[$i]}" = "$current" ]; then
                if [ $i -gt 0 ]; then
                  prev="${ALL_MIGS[$((i-1))]}"
                fi
                break
              fi
            done
            echo "$prev"
          }

          for FILE in "${CHANGED_SORTED[@]}"; do
            [ -z "$FILE" ] && continue
            if [ ! -f "$FILE" ]; then
              # In case git diff listed something that no longer exists (rare), skip
              continue
            fi
            MIG_NAME=$(basename "$FILE" .cs)

            # Determine previous migration for incremental script
            PREV_FILE=$(find_prev "$FILE")
            if [ -n "$PREV_FILE" ]; then
              PREV_NAME=$(basename "$PREV_FILE" .cs)
              INC_ARGS="$PREV_NAME $MIG_NAME"
            else
              INC_ARGS="0 $MIG_NAME"
            fi

            # Filenames inside date folder
            INC_OUT="${DATE_OUTPUT_DIR}/${MIG_NAME}.sql"
            IDEM_OUT="${DATE_OUTPUT_DIR}/${MIG_NAME}_idempotent.sql"

            echo "Generating scripts for migration: $MIG_NAME"
            # Generate incremental
            dotnet ef migrations script $INC_ARGS \
              --project "${API_PROJECT_PATH}" \
              --output "$INC_OUT"

            # Generate idempotent
            dotnet ef migrations script \
              --project "${API_PROJECT_PATH}" \
              --idempotent \
              --output "$IDEM_OUT"

            GENERATED_FILES_LIST+="- \`${INC_OUT}\` (incremental)\n"
            GENERATED_FILES_LIST+="- \`${IDEM_OUT}\` (idempotent)\n"

            if [ $COUNT -eq 0 ]; then
              TITLE_FIRST="$MIG_NAME"
            fi
            TITLE_LAST="$MIG_NAME"
            COUNT=$((COUNT+1))
          done

          # Export details for later steps
          echo "GENERATED_FILES<<EOF" >> $GITHUB_ENV
          echo -e "$GENERATED_FILES_LIST" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          if [ $COUNT -eq 1 ]; then
            echo "MIGRATION_NAME=${TITLE_FIRST}" >> $GITHUB_ENV
            echo "PR_TITLE_SUFFIX=${TITLE_FIRST}" >> $GITHUB_ENV
            echo "PR_BRANCH=migration-scripts/${TITLE_FIRST}" >> $GITHUB_ENV
          else
            echo "MIGRATION_NAME=${TITLE_FIRST}_to_${TITLE_LAST}" >> $GITHUB_ENV
            echo "PR_TITLE_SUFFIX=${COUNT} migrations (${TITLE_FIRST} â†’ ${TITLE_LAST})" >> $GITHUB_ENV
            echo "PR_BRANCH=migration-scripts/${CURRENT_DATE}" >> $GITHUB_ENV
          fi

      - name: Build Change Summary
        id: build_summary
        shell: bash
        run: |
          set -euo pipefail

          BEFORE_SHA=${{ github.event.before || '' }}
          AFTER_SHA=${{ github.sha }}

          if [ -n "${BEFORE_SHA}" ]; then
            CHANGED_FILES=$(git diff --name-only "$BEFORE_SHA" "$AFTER_SHA" | grep -E "^${MIGRATIONS_DIR}/.*_.*\.cs$" | grep -vE "Designer\.cs$|Snapshot\.cs$" || true)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "^${MIGRATIONS_DIR}/.*_.*\.cs$" | grep -vE "Designer\.cs$|Snapshot\.cs$" || true)
          fi

          SUMMARY=""
          if [ -n "$CHANGED_FILES" ]; then
            while IFS= read -r FILE; do
              [ -z "$FILE" ] && continue
              TITLE=$(git log -n 1 --pretty=format:%s -- "$FILE" || true)
              BODY=$(git log -n 1 --pretty=format:%b -- "$FILE" || true)
              MIG_NAME=$(basename "$FILE")
              if [ -z "$TITLE" ]; then
                TITLE="Update to migration $MIG_NAME"
              fi
              SUMMARY+="- ${TITLE} (${MIG_NAME})\n"
              if [ -n "$BODY" ]; then
                BODY_TRIM=$(echo "$BODY" | head -c 600)
                SUMMARY+="  \n  ${BODY_TRIM}\n"
              fi
            done <<< "$(printf "%s\n" $CHANGED_FILES)"
          fi

          if [ -z "$SUMMARY" ]; then
            SUMMARY="Database migration updates: ${{ env.MIGRATION_NAME }}"
          fi

          {
            echo "SUMMARY<<EOF"
            echo -e "$SUMMARY"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(migrations): add incremental and idempotent SQL scripts for: ${{ env.MIGRATION_NAME }} (in ${{ env.CURRENT_DATE }})

            ${{ env.SUMMARY }}

            Generated on: ${{ env.CURRENT_DATE }}
          title: "chore: Migration SQL scripts for ${{ env.PR_TITLE_SUFFIX }} (dated folder)"
          body: |
            ## Database Migration SQL Scripts

            This PR contains the auto-generated SQL scripts for: **${{ env.MIGRATION_NAME }}**

            Scripts are stored in the dated folder: `${{ env.DATE_OUTPUT_DIR }}`

            ### Summary
            ${{ env.SUMMARY }}

            ### Files Added
            ${{ env.GENERATED_FILES }}

            ### Review Checklist
            - [ ] Review SQL statements for data safety
            - [ ] Check for any destructive operations (DROP, DELETE)
            - [ ] Verify migration logic is correct
            - [ ] Confirm script can be applied to target database

            Generated by GitHub Actions on ${{ env.CURRENT_DATE }}.

          branch: ${{ env.PR_BRANCH }}
          delete-branch: true
          draft: false