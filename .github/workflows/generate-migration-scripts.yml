name: Generate Migration SQL Scripts

on:
  push:
    branches: [main]
    paths:
      - 'apps/fakeoverflow-api/FakeOverFlow/FakeoverFlow.Backend.Http.Api/Migrations/**'
      - '.github/workflows/generate-migration-scripts.yml'

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-sql-scripts:
    runs-on: ubuntu-latest

    env:
      SOLUTION_PATH: apps/fakeoverflow-api/FakeOverFlow/FakeOverFlow.sln
      API_PROJECT_PATH: apps/fakeoverflow-api/FakeOverFlow/FakeoverFlow.Backend.Http.Api/FakeoverFlow.Backend.Http.Api.csproj
      MIGRATIONS_DIR: apps/fakeoverflow-api/FakeOverFlow/FakeoverFlow.Backend.Http.Api/Migrations
      OUTPUT_DIR: packages/fakeover-migrations

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build project
        run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

      - name: Install EF Core tools
        run: dotnet tool install --global dotnet-ef --version 9.0.0

      - name: Generate SQL Scripts
        shell: bash
        run: |
          set -euo pipefail

          # Ensure output directory exists
          mkdir -p "${OUTPUT_DIR}"

          # Get the current date
          CURRENT_DATE=$(date +"%Y%m%d")

          # Find the latest migration file (exclude Designer and Snapshot files)
          LATEST_FILE=$(find "${MIGRATIONS_DIR}" -maxdepth 1 -type f -name "*_*.cs" ! -name "*Designer.cs" ! -name "*Snapshot.cs" | sort | tail -n1)
          if [ -z "${LATEST_FILE}" ]; then
            echo "No migration file found in ${MIGRATIONS_DIR}"
            exit 1
          fi

          # Extract migration name without extension
          LATEST_MIGRATION=$(basename "${LATEST_FILE}" .cs)

          echo "Latest migration: ${LATEST_MIGRATION}"
          echo "MIGRATION_NAME=${LATEST_MIGRATION}" >> $GITHUB_ENV
          echo "CURRENT_DATE=${CURRENT_DATE}" >> $GITHUB_ENV

          # Filenames
          STANDARD_SCRIPT_FILENAME="${CURRENT_DATE}_${LATEST_MIGRATION}.sql"
          IDEMPOTENT_SCRIPT_FILENAME="${CURRENT_DATE}_${LATEST_MIGRATION}_idempotent.sql"

          echo "SCRIPT_FILENAME=${STANDARD_SCRIPT_FILENAME}" >> $GITHUB_ENV

          # Generate scripts
          dotnet ef migrations script \
            --project "${API_PROJECT_PATH}" \
            --output "${OUTPUT_DIR}/${STANDARD_SCRIPT_FILENAME}"

          dotnet ef migrations script \
            --project "${API_PROJECT_PATH}" \
            --idempotent \
            --output "${OUTPUT_DIR}/${IDEMPOTENT_SCRIPT_FILENAME}"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(migrations): add SQL scripts for migration: ${{ env.MIGRATION_NAME }}

            Generated on: ${{ env.CURRENT_DATE }}
          title: "chore: Database migration SQL scripts for ${{ env.MIGRATION_NAME }}"
          body: |
            ## Database Migration SQL Scripts

            This PR contains the auto-generated SQL scripts for the migration: **${{ env.MIGRATION_NAME }}**

            ### Files Added:
            - `${{ env.OUTPUT_DIR }}/${{ env.SCRIPT_FILENAME }}` - Standard migration script
            - `${{ env.OUTPUT_DIR }}/${{ env.CURRENT_DATE }}_${{ env.MIGRATION_NAME }}_idempotent.sql` - Idempotent script (safe to re-run)

            ### Review Checklist:
            - [ ] Review SQL statements for data safety
            - [ ] Check for any destructive operations (DROP, DELETE)
            - [ ] Verify migration logic is correct
            - [ ] Confirm script can be applied to target database

            Generated by GitHub Actions on ${{ env.CURRENT_DATE }}.

          branch: migration-scripts/${{ env.MIGRATION_NAME }}
          delete-branch: true
          draft: false